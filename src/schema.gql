# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Admin {
  adminId: Float!
  isSuperUser: Boolean!
  airport: Airport!
  user: User!
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  role: UserRole!
  verified: Boolean!
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  STAFF_MEMBER
  PASSENGER
}

type Passenger {
  id: Float!
  passportNumber: String!
  nationality: String!
  user: User!
}

type Seat {
  id: Float!
  available: Boolean!
  seatNumber: String!
}

type Booking {
  id: Float!
  status: Float!
  seat: Seat!
}

type Interval {
  secs: String
  mins: String
  hours: String
  days: String
}

type StaffPermission {
  id: Int!
  permission: Permissions!
}

enum Permissions {
  MANAGE_FLIGHT_STATUS
  MANAGE_BOOKING_STATUS
  ASSIGNED_TO_A_FLIGHT
}

type StaffRole {
  id: Float!
  name: String!
  airport: Airport!
  staffPermissions: [StaffPermission!]!
}

type StaffMember {
  id: Float!
  employeeId: String!
  user: User!
  role: StaffRole!
  userData: User!
}

type Flight {
  id: ID!
  flightNumber: String!
  departureTime: DateTime!
  arrivalTime: DateTime!
  status: FlightStatus!
  duration: Interval!
  availableSeats: Int!
  airline: Airline!
  originAirport: Airport!
  destinationAirport: Airport!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum FlightStatus {
  ON_TIME
  DELAYED
  CANCELLED
  DEPARTED
  ARRIVED
}

type Airline {
  id: Float!
  name: String!
  airport: Airport!
}

type Airport {
  id: Float!
  name: String!
  city: String!
  country: String!
}

type Message {
  message: String!
}

type Token {
  token: String!
}

type Query {
  getStaffRoleById(staffRoleId: Int!): StaffRole!
  getAirportById(airportId: Int!): Airport!
  getAirlineById(airlineId: Int!): Airline!
}

type Mutation {
  seedAdmin: User!
  registerUser(userData: RegisterUserDto!): User!
  verifyUserEmail(otpData: VerifyUserEmailDto!): User!
  loginUser(credentials: LoginUserDto!): Token!
  resetUserPassword(userData: ResetUserPasswordDto!): Message!
  verifyResetUserPassword(credentials: VerifyResetUserPasswordDto!): Message!
  resendOtp(userData: ResendOtpDto!): Message!
  createStaffRole(staffRole: CreateStaffRoleDto!): StaffRole!
  updateStaffRole(staffRole: UpdateStaffRoleDto!): StaffRole!
  removeStaffRole(staffRoleId: Int!): Message!
  addPermission(staffRoleId: Int!, permission: Permissions!): StaffPermission!
  removePermission(staffRoleId: Int!, permission: Permissions!): Message!
  assignAdminToAnAirport(adminEmail: String!, airportId: Int!): Admin!
  removeAdmin(adminEmail: String!): Message!
  assignStaffMemberToAnAirport(userData: AssignStaffMemberDto!): StaffMember!
  unassignStaffMemberFromAnAirport(staffMemberEmail: String!): Message!
  assignStaffMemberToAFlight(userEmail: String!, flightNumber: String!): StaffMember!
  addPassengerData(passengerData: AddPassengerDataDto!): Passenger!
  updatePassengerData(passengerData: UpdatePassengerDataDto!): Passenger!
  createAirport(airport: CreateAirportDto!): Airport!
  removeAirport(airportId: Int!): Message!
  updateAirport(airport: UpdateAirportDto!): Airport!
  createAirline(airline: CreateAirlineDto!): Airline!
  removeAirline(airlineId: Int!): Message!
  updateAirline(airline: UpdateAirlineDto!): Airline!
  createFlight(FlightData: createFlightDto!): Flight!
  bookFlight(flightNumber: String!): Booking!
}

input RegisterUserDto {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  role: UserRole
}

input VerifyUserEmailDto {
  email: String!
  otp: String!
}

input LoginUserDto {
  email: String!
  password: String!
}

input ResetUserPasswordDto {
  email: String!
}

input VerifyResetUserPasswordDto {
  email: String!
  otp: String!
  password: String!
}

input ResendOtpDto {
  email: String!
}

input CreateStaffRoleDto {
  name: String!
}

input UpdateStaffRoleDto {
  id: Int!
  name: String!
}

input AssignStaffMemberDto {
  employeeId: String!
  userEmail: String!
  roleId: Int!
}

input AddPassengerDataDto {
  passportNumber: String!
  nationality: String!
}

input UpdatePassengerDataDto {
  email: String
  passportNumber: String
  nationality: String
}

input CreateAirportDto {
  name: String!
  city: String!
  country: String!
}

input UpdateAirportDto {
  id: Int!
  name: String
  city: String
  country: String
}

input CreateAirlineDto {
  name: String!
}

input UpdateAirlineDto {
  id: Int!
  name: String
}

input createFlightDto {
  flightNumber: String!
  departureTime: DateTime!
  arrivalTime: DateTime!
  airlineId: Int!
  originAirportId: Int!
  destinationAirportId: Int!
  availableSeats: Int!
}